<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
 PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
 "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
 <mapper namespace="eblock.mybatis.mapper.emp">

<!-- 
		EmpDao 클래스의 각 메소드 상단에 있는 업무를 검색하거나,
		태그 id를 검색하여 찾아가기 바랍니다.
■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■
-->

 <!-- [ 로그인하기 | 테스트완료(09/23) ]────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────  -->
	<select id="login_check" parameterType="map" resultType="map">
		 SELECT CASE(<!-- [ outter CASE문 ] 시작 -->
                	 IFNULL(<!-- [ outter 널값체크 ] 시작 -->
               				(SELECT <!-- [ inner CASE문 ] 시작 -->
               						CASE (SELECT IFNULL(<!-- [ inner 널값체크 ] 시작
               							  					 NULL = -1 / NOT NULL(아이디있음) = 1 -->
               										    (SELECT 1 FROM DUAL WHERE EXISTS
               										     	(SELECT e_id FROM `emp` WHERE e_id = #{e_id})
               										    ), -1 ) FROM DUAL
                                                        <!-- [ inner 널값체크 ] 종료 -->
                                             )
                                     <!-- [ inner 널값체크 결과 ] -1(NULL) / 1(아이디있음) -->
                                     WHEN -1 THEN -1
                                     WHEN  1 THEN (SELECT 2 FROM `emp`
                                                    WHERE e_id = #{e_id}
                                                      AND e_pw = #{e_pw} ) <!-- 아이디&비번 모두 조회할때, 일치하면 2 반환 -->
                                      END
                                  <!-- [ inner CASE문 ] 종료 -->
                                  FROM dual
                             ), 1 )
                            <!-- [ outter 널값체크 ] 종료 -->
                            )
                <!-- [ outter 널값체크 결과 ] -1(아이디틀림) / 1(아이디만 맞음) / 2(모두일치) -->
                WHEN -1 THEN 'THE_ID_DOSE_NOT_EXIST' 	<!-- 아이디가 존재하지 않는다는 안내메시지 -->
                WHEN  1 THEN 'PASSWORD_DOSE_NOT_MATCH'  <!-- 아이디만 맞고, 비밀번호가 일치하지 않는다는 안내메시지 -->
                WHEN  2 THEN 'CONFIRM'					<!-- 아이디,비밀번호 모두 일치한다는 안내메시 -->
                 END AS 'res_msg'
  		  FROM DUAL;
	</select>
	<!-- 아이디와 비번이 모두 맞아서, CONFIRM'을 DB에서 받았을 때, 아래 쿼리를 호출 -->
	<select id="get_empInfo" parameterType="map" resultType="map">
		SELECT
			 d_no   AS 'd_no' 	<!-- 부서번호 -->
	 		,d_name AS 'd_name'	<!-- 부서이름 -->
	 		,e_no   AS 'e_no' 	<!-- 사원번호 -->
    		,e_name AS 'e_name'	<!-- 사원이름 -->
    		,e_rank AS 'e_rank' <!-- 사원직급 -->
    		,au_no	AS 'au_no'	<!-- 사원권한 -->
  		  FROM `view_DpEmpName`
 		 WHERE e_no = (SELECT e_no FROM `emp`WHERE e_id = #{e_id}
                                               AND e_pw = #{e_pw});
	</select>


	
<!--
■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■
-->


	
 <!-- [ 사원조회 | 테스트완료(09/23) ]────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────  -->
	<select id="info_empList" parameterType="map" resultType="map">
		SELECT
			 d.d_name	AS 'd_name'	<!-- 부서이름 -->
			,e.e_no 	AS 'e_no'	<!-- 사원번호 -->
			,e.e_name 	AS 'e_name'	<!-- 사원명 -->
			,e.e_rank	AS 'e_rank'	<!-- 사원직급 -->
			,e.au_no	AS 'au_no'	<!-- 권한번호 -->
			,d.d_ph		AS 'd_ph'	<!-- 부서연락처 -->
			,e.e_ph		AS 'e_ph'	<!-- 사원연락처 //오타수 -->
			,e.e_email	AS 'e_mail'	<!-- 사원이메일 -->
		  FROM emp e, dept d
		 WHERE e.d_no = d.d_no
		 <choose>
		 	<when test="e_no != null">
		   		AND e.e_no = #{e_no} </when>
		 	<when test="e_name != null">
			   AND e.e_name LIKE '%${e_name}%'<!-- MySQL의 LIKE PATTERN MATCH -->
			</when>
		 	<when test="d_name != null">
			   AND d.d_name LIKE '%${d_name}%'<!-- MySQL의 LIKE PATTERN MATCH -->
			   </when>
		 	<when test="min_ejdate != null"><!-- 검색최소입사기한 -->
			   <![CDATA[ AND e.e_jdate >= #{min_ejdate} ]]>	</when>
		 	<when test="max_ejdate != null"><!-- 검색최대입사기한 -->
			   <![CDATA[ AND e.e_jdate <= #{max_ejdate} ]]>	</when>
		 </choose>
		 ORDER BY e_rank desc, e_no
	</select>
		
		
 <!-- [ 사원개인정보조회 | 테스트완료(09/23) ]────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────  -->
	<select id="info_persList" parameterType="map" resultType="map">
		SELECT
			 d.d_name	AS 'd_name'	<!-- 부서이름 -->
			,e.e_no 	AS 'e_no'	<!-- 사원번호 -->
			,e.e_id 	AS 'e_id'	<!-- 사원아이디 -->
			,e.e_name 	AS 'e_name'	<!-- 사원명 -->
			,e.e_rank	AS 'e_rank'	<!-- 사원직급 -->
			,e.au_no	AS 'au_no'	<!-- 권한번호 -->
			,d.d_ph		AS 'd_ph'	<!-- 부서연락처 -->
			,e.gender	AS 'gender'	<!-- 사원성별 -->
			,e.e_jdate	AS 'e_jdate'<!-- 사원입사일 -->
			,e.e_bdate	AS 'e_bdate'<!-- 사원생일 -->
			,e.e_ph		AS 'e_ph'	<!-- 사원연락처 // 오타수정(화면측체크) -->
			,e.e_email	AS 'e_mail'	<!-- 사원이메일 -->
		  FROM emp e, dept d
		 WHERE e.d_no = d.d_no
		   AND e.e_no = #{e_no}
	</select>


 <!-- [ 사원개인정보수정 | 테스트완료(09/21) ]────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────  -->
	<update id="info_persUpd" parameterType="map">
		UPDATE `emp`
		<trim prefix="SET" prefixOverrides=",">
			<if test="e_pw != null">e_pw = #{e_pw}</if>
			<if test="e_ph != null">,e_ph = #{e_ph}</if>
			<if test="e_email != null">,e_email = #{e_email}</if>
			<if test="e_addr != null">,e_addr = #{e_addr}</if>
		</trim><!-- SET으로 문장이 선행하도록 할때, 각 태그가 콤마(,)로 시작하게되면 콤마를 잘라주는 동적SQL태그 -->
         WHERE e_no = #{e_no}
	</update>



<!--
■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■
-->



 <!-- [ 인사평가 입력 | 테스트완료(09/21) ]────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────  -->
 	<insert id="pev_add" statementType="CALLABLE" parameterType="map" >
	<!-- 프로시저 호출은 execute 권한이 있는 계정만 호출가능하다. ( IS NOT OUT PARAMETER ERROR 주의 )
	 	 프로시저 호출시, CALL과 프로시이름 사이는 스페이스만 허용한다. -->
	 	{ CALL proc_pev_add( #{ev_eno}    <!-- 평가사원번호 -->
							,#{tg_eno}    <!-- 대상사원번호 -->
							,#{ev_content}<!-- 평가내용 -->
							,#{ev_score}  <!-- 평가점수 -->
							,#{result,mode=OUT,jdbcType=INTEGER}
			)				<!-- OUT파라미터는 jdbcType을 명시한다. -->
		}
	</insert>


 <!-- [ 인사평가 수정 | 테스트완료(09/23) ]────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────  -->
 	<insert id="pev_upd" statementType="CALLABLE" parameterType="map" >
	<!-- 프로시저 호출은 execute 권한이 있는 계정만 호출가능하다. ( IS NOT OUT PARAMETER ERROR 주의 )
	 	 프로시저 호출시, CALL과 프로시이름 사이는 스페이스만 허용한다. -->
	 	{ CALL proc_pev_upd( #{ev_eno}
							,#{tg_eno}
							,#{ev_content}
							,#{ev_score}
							,#{result,mode=OUT,jdbcType=INTEGER,javaType=int}
			)				<!-- OUT파라미터는 jdbcType을 명시한다. -->
		}
	</insert>
  
  
 <!-- [ 인사평가 조회 | 테스트완료(09/23) ]────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────  -->
	<select id="pev_myList" parameterType="map" resultType="map">
		SELECT
	         	  ev_eno     <!-- 평가사원번호 -->
	         	, tg_eno     <!-- 대상사원번호 -->
	         	, qrt_no     <!-- 평가분기번호 -->
	         	, ev_date    <!-- 평가일자 -->
	         	, ev_content <!-- 평가내용 -->
	         	, ev_score   <!-- 평가점수 -->
	         	, ratio      <!-- 평가점수비율 -->
	         	, e_name     <!-- 사원이름 -->
  		  FROM `pev` LEFT JOIN `emp` ON tg_eno = e_no
  		  WHERE ev_eno = #{ev_eno}
  		<choose>
		 	<when test="min_qrtno != null">
  		   		<![CDATA[ AND qrt_no >= #{min_qrtno} ]]>
		 	</when>
		 	<when test="max_qrtno != null">
   		   		<![CDATA[ AND qrt_no <= #{max_qrtno} ]]>
		 	</when>
		 </choose> 
	</select>
	
 
 <!-- [ 내가 평가 가능한 사원 조회   ]────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────  -->
   <select id="pev_tgList" parameterType="map" resultType="map">
      SELECT e_no as 'tg_eno', e_name
			,(CASE WHEN (e_rank = 50) THEN '대표' 
				   WHEN (e_rank = 40) THEN '부서장'
				   WHEN (e_rank = 30) THEN '차장'
				   WHEN (e_rank = 20) THEN '팀장'
				   WHEN (e_rank = 10) THEN '사원'
				   ELSE '인턴' END
			   ) AS `e_rank`
      FROM `emp` 
       WHERE d_no = #{d_no}
         AND e_no NOT IN (SELECT  tg_eno FROM `pev` 
                           	 WHERE ev_eno=#{e_no})
         AND e_no != #{e_no}
         AND e_rank != 0
   </select>
 
<!--
■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■
-->
 
 
 
 <!-- [ 출결 체크하기 | 테스트완료(09/25) ]────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────  -->
	<insert id="cmt_checkIn" parameterType="map">
		INSERT INTO `cmt_list`(cmt_no, e_no, cmt_date, cmt_time)
		VALUES(nextSeqVal('seq_cmt_no') <!-- MySQL function으로 만든 시퀀스 -->
			  ,#{e_no}
			  ,DATE_FORMAT(now(), '%Y-%m-%d') <!-- 2011-06-14 -->
      		  ,curtime() <!-- 19:32:23 -->
			  )
		ON DUPLICATE KEY
		UPDATE <!-- 표준SQL에 따른 INSERT구문. 키가 중복될때 내용을 업데이트하라는 지시 -->
			   e_no = #{e_no}
			  ,cmt_date = DATE_FORMAT(now(), '%Y-%m-%d') <!-- 2011-06-14 -->
			  ,cmt_time = curtime() <!-- 19:32:23 -->
	</insert>

 <!-- [ 출결 조회하기 (달력용) | 테스트완료(10/01) ]────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────  -->
 	<select id="cmt_calendar" parameterType="map" resultType="map">
 		SELECT
			  <!-- '2018-10-01T13-45-27' 으로 반환 -->
    		 CONCAT(cmt_date,'T',first_check) AS 'checkin',
		     IF(last_check='--:--:--'
		       ,NULL <!-- 입실때 한번찍은 경우, last_check는 나오지 않는데, 이때, Calendar기능에 맞게 null로 반환한다. -->
		       ,CONCAT(cmt_date,'T',last_check)) AS 'checkout'
			      <!-- '2018-10-01T13-45-27' 으로 반환 -->
		  FROM view_cmt_list
		 WHERE e_no = #{e_no}
 	</select>
 <!-- [ 출결 조회하기 | 테스트완료(09/25) ]────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────  -->
	<select id="cmt_list" parameterType="map" resultType="map">
		SELECT
			 d_name 	<!-- 부서이름 -->
			,e_no 		<!-- 사원번호 -->
			,e_name 	<!-- (사원)이름 -->
			,e_rank 	<!-- (사원)직급 -->
			,cmt_date 	<!-- (출결)일자 -->
			,first_check<!-- 출근입력시각 -->
			,attend 	<!-- 출결상태 -->
			,last_check <!-- 최종입력시각 -->
			,lv_state 	<!-- 퇴근상태 -->
			,io_state 	<!-- 재실유무 -->
		  FROM view_cmt_list
		<trim prefix="WHERE" prefixOverrides="AND ">
		 	<if test="e_no != null"> <!-- 개인이 확인할 때의 조건 -->
				e_no = #{e_no}
			</if>
		 	<if test="d_name != null"> <!-- 부서장이 확인할 때의 조건 -->
		   		AND d_name = #{d_name}
			</if>
		 	<if test="prev_cmt_date != null"> <!-- 검색시작일자 -->
				<![CDATA[ AND cmt_date >= #{prev_cmt_date} ]]> <!-- 2018-09-01 -->
			</if>
		 	<if test="post_cmt_date != null"> <!-- 검색종료일자 -->
				<![CDATA[ AND cmt_date <= #{post_cmt_date} ]]> <!-- 2018-09-30 -->
			</if>
		</trim>
		 ORDER BY cmt_date DESC <!-- 최근 날짜가 제일 위로 올라오도록 조정 -->
	</select>
 
 
<!--
■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■
-->
 
 <!-- [ 기존사원 계약조회 ]────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────  -->
 <select id="cntr_list" parameterType="map" resultType="map">
	SELECT
		  e.e_no       AS 'e_no'      <!-- 사원번호 -->
		, e.e_name     AS 'e_name'    <!-- 사원이름 -->
		, e.e_id 	   AS 'e_id'	  <!-- 아이디 -->	
		, e.e_pw 	   AS 'e_pw'	  <!-- 비밀번호 -->	
		, e.e_ph 	   AS 'e_ph'	  <!-- 사원연락처 -->	
		, e.e_email    AS 'e_email'	  <!-- 사원이메일 -->	
		, e.e_addr     AS 'e_addr'	  <!-- 사원주소 -->	
		, e.e_bdate    AS 'e_bdate'	  <!-- 생년월일 -->	
		, e.gender     AS 'gender'	  <!-- 성별 -->	
		, e.d_no       AS 'd_no'      <!-- 부서번호 -->
		, d.d_name     AS 'd_name'    <!-- 부서이름 -->
		, e.e_jdate    AS 'e_jdate'   <!-- 입사일자 -->
		, e.au_no      AS 'au_no'     <!-- 권한번호 -->
		, e.note       AS 'e_note'    <!-- 사원비고 -->
		, c.cntr_date  AS 'cntr_date' <!-- 계약일자 -->
		, c.cntr_sort  AS 'cntr_sort' <!-- 계약분류 -->
		, c.cntr_sal   AS 'cntr_sal'  <!-- 계약연봉 -->
		, c.cntr_state AS 'cntr_state'<!-- 계약상태 -->
		, c.cntr_sdate AS 'cntr_sdate'<!-- 계약시작일자 -->
		, c.cntr_fdate AS 'cntr_fdate'<!-- 계약종료일자 -->
		, c.e_rank     AS 'e_rank'    <!-- 계약직급 -->
		, c.note       AS 'cntr_note' <!-- 계약비고 -->
	FROM
		`emp` e
	LEFT JOIN `cntr_list` c
		ON e.e_no = c.e_no
	LEFT JOIN `dept` d
		ON e.d_no = d.d_no
	WHERE c.cntr_state = '진행'
	AND e.e_no = #{e_no}
	ORDER BY cntr_date DESC
	LIMIT 1;
 </select>
 
 <!-- [ 신입사원 '등록 및 계약' 혹은 기존사원 '재계약' ]────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────  -->
	<insert id="cntr_addEmp" statementType="CALLABLE" parameterType="map" >
	<!-- 프로시저 호출은 execute 권한이 있는 계정만 호출가능하다. ( IS NOT OUT PARAMETER ERROR 주의 )
	 	 프로시저 호출시, CALL과 프로시이름 사이는 스페이스만 허용한다. -->
		{ CALL proc_cntr_addEmp(
				    ${e_no} 	    <!-- 사원번호 	: 5 -->
	                ,${d_no} 	    <!-- 부서번호 	: 1200 / 부서가 미배정상태일경우 미기입 -->
	                ,#{e_id} 	    <!-- 아이디 	: numuphep -->
	                ,#{e_pw} 	    <!-- 비밀번호 	: qwer -->
	                ,#{e_name} 	   	<!-- 사원이름 	: 고형권 -->
	                ,#{e_jdate}     <!-- 입사일자 	: 2016-11-12 -->
	                ,${au_no} 	    <!-- 권한번호 	: 10 -->
	                ,#{e_ph} 	    <!-- 사원연락처 : 010-1111-9890 -->
	                ,#{e_email}     <!-- 사원이메일 : qwerqwer@asdf.com -->
	                ,#{e_addr} 	    <!-- 사원주소 	: 일단 어딘가에 살고 있다 -->
	                ,#{note1} 	    <!-- 사원비고 	: 기존사원 재계약 테스트 -->
	                ,#{e_bdate}     <!-- 생년월일	: 1954-12-26 -->
	                ,${gender} 	    <!-- 성별 	: 1(남),0(여) -->
	                ,${e_rank} 		<!-- 직급 	: 10(사원),20(팀장),30(과장),40(부서장),50(대표이사) -->
	               
	               <!-- 기존사원을 재계약하는 경우, 상기자료를 DB에서 조회한 뒤, 화면에 띄우고,
	               	 일부 수정자료와 함께 넘겨 받음. -->
	               
	                ,#{cntr_date} 	<!-- 계약일자 	: 2018-04-03 -->
	                ,#{cntr_sort} 	<!-- 계약분류 	: 공채/특채/협상/만료 -->
	                ,${cntr_sal} 	<!-- 계약연봉 	: 4000*10000 -->
	                ,#{cntr_sdate} 	<!-- 계약시작일자 : 2018-05-01 -->
	                ,#{cntr_fdate} 	<!-- 계약종료일자 : 2019-04-31 -->
                    ,#{note2} 		<!-- 계약비고 	: 'test!test! -->
                    
                    ,#{result,mode=OUT,jdbcType=INTEGER,javaType=int}
			)		<!-- OUT파라미터는 jdbcType을 명시한다. -->
		}
	</insert>
 
 <!-- [ 부서배정/이동/권한부여 | 테스트완료(09/26) ]────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────  -->
 	<update id="setDeptAuth" parameterType="map">
 		UPDATE `emp`
 		<trim prefix="SET" prefixOverrides=",">
		 	<if test="d_no != null"> <!-- 부서배정시 번호부여 -->
				d_no = #{d_no}
			</if>
		 	<if test="au_no != null"> <!-- 권한부여시 번호부여 -->
				,au_no = #{au_no}
			</if>
 		</trim>
		 WHERE e_no = #{e_no}
 	</update>
 
 
<!--
■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■
-->
 
 
 <!-- [ 퇴사신청하기 ]────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────  -->
 	<insert id="retire_ask" parameterType="map">
 		INSERT INTO `retire_ask_list`
 					(rt_no, ask_date, rt_date, outcome, ask_rsn, ask_eno, sign_eno)
		VALUES(nextSeqVal('seq_rt_no')
           	  ,DATE_FORMAT(now(), '%Y-%m-%d') <!-- 퇴사신청일자 : 2011-06-14 -->
      		  ,#{rt_date} <!-- 퇴사예정일자 : 2018-10-26 -->
			  ,'rta-1' <!-- 신청결과상태값-->
      		  ,#{ask_rsn} <!-- 신청사유 -->
      		  ,#{ask_eno} <!-- 퇴사신청사원 -->
      		  ,1 <!-- #{sign_eno} --> <!-- 퇴사결재사원 -->
      		  );
 	</insert>
 	
 <!-- [ 퇴사신청내역 조회하기 | 테스트완료(09/27) ]────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────  -->
	<select id="retire_list" parameterType="map" resultType="map">
		  SELECT
		       rt_no, rt_date, ask_eno, ask_rsn, sign_rsn, sign_eno, outcome, ask_date, sign_date
		    FROM `view_retire_ask_list` <!-- 뷰에서 조회 -->
		   <trim prefix="WHERE" prefixOverrides="AND ">
				<if test="ask_eno != null">
					AND ask_eno = #{ask_eno}
				</if> 	
				<if test="sign_eno != null">
					AND sign_eno = #{sign_eno}
				</if> 	
				<if test="outcome != null">
					AND outcome = #{outcome} <!-- 취소일때 'rta-0' / 접수직후 대기일때 'rta-1' / 기각일때 'rta-2' / 승인일때 'rta-3'  -->
				</if> 	
				<if test="prev_ask_date != null">
				   <![CDATA[ AND ask_date >= #{prev_ask_date} ]]> <!-- 2018-09-01 -->
				</if> 	
				<if test="post_ask_date != null">
				   <![CDATA[ AND ask_date <= #{post_ask_date} ]]> <!-- 2018-10-01 -->
				</if> 
			</trim>
		  ORDER BY rt_date ASC, ask_date DESC
	</select>
 	
 <!-- [ 퇴사신청내역 수정하기 | 테스트완료(09/27) ]────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────  -->
	<update id="retire_askUpd" parameterType="map">
		UPDATE `retire_ask_list`
		<trim prefix="SET" prefixOverrides=",">
			<if test="rt_date != null">,rt_date = #{rt_date}</if> <!-- 퇴사예정일자 수정 -->
			<if test="ask_rsn != null">,ask_rsn = #{ask_rsn}</if> <!-- 퇴사사유 수정 -->
			<if test="outcome != null">,outcome = #{outcome}</if> <!--  취소일때 'rta-0' / 접수직후 대기일때 'rta-1' -->
			<if test="sign_eno != null">,sign_eno = #{sign_eno}</if> <!-- 퇴사결재사원 수정 -->
		</trim>
		WHERE rt_no = #{rt_no}
		  AND ask_eno = #{ask_eno}
	</update>
 
 <!-- [ 퇴사신청 결재하기 | 테스트완료(09/27) ]────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────  -->
	<update id="retire_sign" parameterType="java.util.List">
		<foreach item="item" index="key" collection="list" separator=";">
		UPDATE `retire_ask_list`
		   SET sign_rsn  = '퇴사처리완료' <!-- 승인사유 -->
   			  ,sign_date = DATE_FORMAT(now(), '%Y-%m-%d')
   			  ,outcome   = #{item.outcome} <!-- 승인일때 'rta-3' / 기각일때 'rta-2' -->
   		 WHERE rt_no = #{item.rt_no}
   		AND sign_eno = #{item.sign_eno}
   		 </foreach>
	</update>
	
<!--
■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■
-->
	<select id="esti_sign_no" parameterType="map" resultType="map">
		SELECT  1 AS grouping
			,SUM(IF(e_rank=30, e_no,0)) AS sign_eno1
			,SUM(IF(e_rank=40, e_no,0)) AS sign_eno2
			,SUM(IF(e_rank=50, e_no,0)) AS sign_eno3
		  FROM 
			 (SELECT  e_no, e_rank
			  FROM emp 
			 WHERE d_no = #{d_no} -- 해당부서
			   AND e_rank> #{e_rank} -- 내 직급 이상
			UNION ALL
			 SELECT e_no, e_rank -- 대표
			   FROM emp
			  WHERE e_rank=50 
			  ) `emp`
		GROUP BY grouping
	</select>
	
	
 </mapper>
